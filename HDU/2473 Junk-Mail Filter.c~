#include <stdio.h>
#include <string.h>
#define N 1100005
#define Num 100005
int set[N];
int idx[Num];
int f[N];


/* init the set. all will be set a value -1 */
void makeSet(int n)
{
	memset(set, -1, sizeof(int)*n);
}

/* find operation. return the id's root num */
int getF(int id)
{
	int father = id;
	int temp = id;
	while(set[father] >= 0)
		father = set[father];

	while(set[id] >= 0)
	{
		temp = set[id];
		set[id] = father;
		id =temp;
	}
	return father;
}

/* union operation. union the sets who containt element id1, id2 */
void Union(int id1, int id2)
{
	int fA, fB;
	fA = getF(id1);
	fB = getF(id2);

	if (fA == fB)
		return;
	if (set[fA] < set[fB])
	{
		set[fA] += set[fB];
		set[fB] = fA;
	}
	else
	{
		set[fB] += set[fA];
		set[fA] = fB;
	}
}

int main()
{
	int i, res, a, b, n, m, ncase = 1;
	int newNode;
	char c[1];
	while(scanf("%d %d", &n, &m), m || n)
	{
		newNode = n;
		for(i = 0;i < n;i++)
			idx[i] = i;
		makeSet(m + n);

		while(m--)
		{
			printf("new::%d\n", newNode);
			scanf("%s", c);

			printf("ccc%d\n", c[1]);
			if (c[0] == 'M')
			{
				scanf("%d %d", &a, &b);
				//Union(idx[a], idx[b]);
			}
			else
			{
				scanf("%d", &a);
				//idx[a] = newNode++;
			}
		}
		
		res = 0;
		memset(f, 0, sizeof(f));
		for(i = 0;i < n;i++)
		{
			int temp = getF(idx[i]);
			if(!f[temp])
			{
				f[temp] = 1;
				res++;
			}
		}
		printf("Case #%d: %d\n", ncase++, res);
	}
	return 0;
}
