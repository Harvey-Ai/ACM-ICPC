#include <stdio.h>
#include <string.h>
#define NV 305
#define NP 35

int villages[NV];
int dp[NV][NP];
int dist[NV][NV], minDD[NV][NV];
int sumD[NV];

int minD(int s, int t)
{
	int i, minDist = 0;

	if (minDD[s][t])
		return minDD[s][t];
	for(i = s + 1;i < t;i++)
		if(dist[i][s] < dist[i][t])
			minDist += dist[i][s];
		else
			minDist += dist[i][t];
	minDD[s][t] = minDist;
	return minDist;
}

int main()
{
	int i, j, k, s, n, m, res, min, temp;
	scanf("%d %d", &n, &m);
	for(i = 0;i < n;i++)
		scanf("%d", &villages[i]);

	memset(minDD, 0, sizeof(minDD));

	for(i = 0;i < n;i++)
		for(j = i;j < n;j++)
			dist[i][j] = dist[j][i] = villages[j] - villages[i];
	
	for(i = 0;i < n;i++)
	{
		dp[i][0] = 0;
		for(j = 0;j < n;j++)
			dp[i][0] += dist[j][i];
	}


	for(i = 0;i < n;i++)
	{
		sumD[i] = 0;
		for(j = i + 1;j < n;j++)
			sumD[i] += dist[i][j];
	}

	for(i = 1;i < m;i++)
		for(j = i;j < n;j++)
		{
			min = 10000000;
			for(k = i - 1;k < j;k++)
			{
				temp = dp[k][i-1] + minD(k, j) - sumD[k];
				if (temp < min)
					min = temp;
			}
			dp[j][i] = min + sumD[j];
		}
	
	res = 10000000;
	for(j = m - 1;j < n;j++)
		if (res > dp[j][m-1])
			res = dp[j][m-1];
	printf("%d\n", res);
	return 0;
}
