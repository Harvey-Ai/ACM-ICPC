#include <iostream>
#include <cassert>
using namespace std;

char newOp[51];
int newOpNum[51];

int dp[101][101];
int dp2[101][101];

void cal(int head, int tail)
{
	if (dp[head][tail] != -100000)
		return;
	if (head == tail)
    {
        dp[head][tail] = newOpNum[head];
		dp2[head][tail] = newOpNum[head];
        return;
    }
    
	int maxV = -100000;
    int minV = 100000;
	for(int i = head;i < tail;i++)
	{
		int temp1, temp2;
        cal(head, i);
        cal(i + 1, tail);
        
        if (newOp[i] == 't')
        {
            temp1 = dp[head][i] + dp[i + 1][tail];
            temp2 = dp2[head][i] + dp2[i + 1][tail];
        }
		else if (newOp[i] == 'x')
        {
            temp1 = dp[head][i] * dp[i + 1][tail];
            if (temp1 < dp2[head][i] * dp2[i + 1][tail])
                temp1 = dp[head][i] * dp[i + 1][tail];
            if (temp1 < dp[head][i] * dp2[i + 1][tail])
                temp1 = dp[head][i] * dp2[i + 1][tail];
            if (temp1 < dp2[head][i] * dp[i + 1][tail])
                temp1 = dp2[head][i] * dp[i + 1][tail];
            
            temp2 = dp[head][i] * dp[i + 1][tail];
            if (temp2 > dp2[head][i] * dp2[i + 1][tail])
                temp2 = dp2[head][i] * dp2[i + 1][tail];
            if (temp2 > dp[head][i] * dp2[i + 1][tail])
                temp2 = dp[head][i] * dp2[i + 1][tail];
            if (temp2 > dp2[head][i] * dp[i + 1][tail])
                temp2 = dp2[head][i] * dp[i + 1][tail];
        }
		if (temp1 > maxV)
			maxV = temp1;
        if (temp2 < minV)
            minV = temp2;
	}
	dp[head][tail] = maxV;
    dp2[head][tail] = minV;
}

int main()
{
	int n;
	char op[51];
	int opNum[51];

	while(cin >> n)
    {
	for(int i = 0;i < n;i++)
		cin >> op[i] >> opNum[i];
	
	int res[100];
	for(int i = 0;i < n;i++)
	{
		int head = i, tail = i;
		int k = 0;
		newOp[k] = op[(head + 1) % n];
		newOpNum[k++] = opNum[head];
		for(int j = (head + 1) % n;j != tail;j = (j + 1) % n)
		{
			if (((j + 1) % n) != tail)
				newOp[k] = op[(j + 1) % n];
			newOpNum[k++] = opNum[j];
		}

		for(int l1 = 0;l1 < n;l1++)
			for(int l2 = 0;l2 < n;l2++)
				dp[l1][l2] = -100000;
		cal(0, n - 1);
        res[i] = dp[0][n - 1];
	}

	int max = -100000;
	for(int i = 0;i < n;i++)
		if (res[i] > max)
			max = res[i];
	cout << max << endl;

	for(int i = 0;i < n;i++)
		if (res[i] == max)
			cout << i + 1 << " ";
	cout << endl;
    }
	return 0;
}
