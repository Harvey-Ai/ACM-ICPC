#include <iostream>
#include <cstring>
#include <queue>
using namespace std;

int graph[205][205];
int visited[205];
int newStream;
int n;

void bfs()
{
    for(int i = 1;i <= n;i++)
        visited[i] = -1;
    visited[1] = 0;
    newStream = 0;
    queue<pair<int, int> > streamQ;
    streamQ.push(make_pair(1, 1000000));
    while(!streamQ.empty())
    {
        int k = streamQ.front().first;
        int val = streamQ.front().second;
        streamQ.pop();
        if (k == n)
        {
            newStream = val;
            break;
        }
        
        for(int i = 1;i <= n;i++)
            if (visited[i] == -1 && graph[k][i] > 0)
            {
                streamQ.push(make_pair(i, min(graph[k][i], val)));
                visited[i] = k;
            }
    }
    
    int preNode = n;
    while(visited[preNode] > 0)
    {
        graph[visited[preNode]][preNode] -= newStream;
        graph[preNode][visited[preNode]] += newStream;
        preNode = visited[preNode];
    }
}

int main()
{
	int m;
	while(cin >> m >> n)
	{
		memset(graph, 0, sizeof(graph));
		for(int i = 0;i < m;i++)
		{
			int a, b;
			int cap;
			cin >> a >> b >> cap;
			graph[a][b] += cap;
		}
		
		bfs();
		int res = 0;
		while(newStream > 0)
		{
			res += newStream;
			bfs();
		}
		cout << res << endl;
	}
	return 0;
}
