#include <iostream>
#include <vector>
#include <cstdio>
using namespace std;

int node1, node2;
int res;
vector< vector<int> > graph;

void dfs(int node, int fa, int &has1, int &has2)
{
	for(int i = 0;i < graph[node].size();i++)
	{
		int temp1 = 0, temp2 = 0;
		if (graph[node][i] != fa)
		{
			dfs(graph[node][i], node, temp1, temp2);
			if (temp1 == 1)
				has1 = 1;
			if (temp2 == 1)
				has2 = 1;
		}
	}

	if (node == node1)
		has1 = 1;
	if (node == node2)
		has2 = 1;


	if (has1 && has2 && res == -1)
		res = node;
}

int main()
{
	int ncase;
	cin >> ncase;

	while(ncase--)
	{
		int n;
		scanf("%d", &n);
		graph.clear();
		graph.resize(n);
		vector<int> inDegree;
		inDegree.resize(n);

		for(int i = 0;i < n - 1;i++)
		{
			int a, b;
			scanf("%d %d", &a, &b);
			graph[a - 1].push_back(b - 1);
			inDegree[b - 1]++;
		}

		int root = -1;
		for(int i = 0;i < n;i++)
			if (inDegree[i] == 0)
			{
				root = i;
				break;
			}

		scanf("%d %d", &node1, &node2);
		node1--, node2--;
		res = -1;

		int has1 = 0, has2 = 0;
		dfs(root, -1, has1, has2);
		cout << res + 1 << endl;		
	}

	return 0;
}
