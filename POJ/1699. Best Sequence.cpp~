#include <iostream>
#include <string>
using namespace std;

int n;
int dp[1 << 10][15];
int graph[15][15];
string segStr[15];

int maxSimilar(string a, string b)
{
    for(int k = 0;k < a.size();k++)
    {
        int i;
        for(i = 0; i < b.size() && (i + k) < a.size();i++)
            if (a[i + k] != b[i])
                break;
        if (i == b.size() || (i + k) == a.size())
            return i;
    }
    return 0;
}

void dfs(int status, int cur, int val)
{
    if (dp[status][cur] != -1 && dp[status][cur] < val)
        return;


    dp[status][cur] = val;
    for(int i = 0;i < n;i++)
    {
        if (status & (1 << i))
            continue;
        
        if (graph[cur][i] == segStr[i].size())
            dfs(status | (1 << i), cur, val);
        else
            dfs(status | (1 << i), i, val + segStr[i].size() - graph[cur][i]);
    }
}


int main()
{
    int ncase;
    cin >> ncase;

    while(ncase--)
    {
        cin >> n;
        for(int i = 0;i < n;i++)
            cin >> segStr[i];

        for(int i = 0;i < n;i++)
            for(int j = 0;j < n;j++)
                graph[i][j] = maxSimilar(segStr[i], segStr[j]);
            
        for(int i = 0;i < (1 << n);i++)
            for(int j = 0;j < n;j++)
                dp[i][j] = -1;

        for(int i = 0;i < n;i++)
            dfs(1 << i, i, segStr[i].size());

        int res = 100000;
        for(int i = 0;i < n;i++)
            if (dp[(1 << n) - 1][i] < res && dp[(1 << n) - 1][i] != -1)
                res = dp[(1 << n) - 1][i];
        cout << res << endl;
    }
    return 0;
}