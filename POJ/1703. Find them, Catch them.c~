#include <stdio.h>
#include <string.h>
#define N 100005
int set[N];

void makeSet()
{
	memset(set, -1, sizeof(set));
}

int getF(int id)
{
	int father = id;
	while(set[id] >= 0)
	{
		id = set[id];
		father = id;
	}
	return father;
}

void Union(int id1, int id2)
{
	int fA, fB;
	fA = getF(id1);
	fB = getF(id2);

	if (fA == fB)
		return;
	if (set[fA] < set[fB])
	{
		set[fA] += set[fB];
		set[fB] = fA;
	}
	else
	{
		set[fB] += set[fA];
		set[fA] = fB;
	}
}

int main()
{
	char c;
	int ncase, i, a, b, m, n;
	int oppos[N];

	scanf("%d", &ncase);

	while(ncase--)
	{
		makeSet();
		memset(oppos, -1, sizeof(oppos));
		scanf("%d %d", &n, &m);
		for(i = 0;i < m;i++)
		{
			getchar();
			scanf("%c %d %d", &c, &a, &b);
			if(c == 'A')
			{
				if (oppos[a] == -1 || oppos[b] == -1)
					printf("Not sure yet.\n");
				else if (getF(a) == getF(b))
					printf("In the same gang.\n");
				else if (getF(a) == getF(oppos[b]) || getF(b) == getF(oppos[a]))
					printf("In different gangs.\n");
				else
					printf("Not sure yet.\n");
			}
			else
			{
				if (oppos[a] == -1)
					oppos[a] = b;
				if (oppos[b] == -1)
					oppos[b] = a;
				Union(a, oppos[b]);
				Union(b, oppos[a]);
			}
		}
	}
	return 0;
}

