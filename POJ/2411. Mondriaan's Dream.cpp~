#include <iostream>
using namespace std;

int buffer[12];
bool confilict[1 << 11][1 << 11][11];

bool check(int st1, int st2, int n)
{
	int ok[11];
	for(int i = 0;i < 11;i++)
		ok[i] = 0;

	for(int i = 0;i < 11;i++)
	{
		if (st1 & buffer[i])
		{
			if (st2 & buffer[i])
				return false;
			else
			{
				if (i)
					ok[i] = ok[i - 1];
				else
					ok[i] = 1;
			}
		}
		else
		{
			if (st2 & buffer[i])
			{
				if (i)
					ok[i] = ok[i - 1];
				else
					ok[i] = 1;
			}
			else if (i > 0)
			{
				if ((st2 & buffer[i - 1]) == 0 && (st1 & buffer[i - 1]) == 0)
				{
					if (i == 1)
						ok[i] = 1;
					else if (i > 1 )
						ok[i] = ok[i - 2];
				}
			}
		}
	}
	return ok[n - 1];
}

int main()
{
	int m, n;

    buffer[0] = 1;
    for(int i = 1;i < 12;i++)
        buffer[i] = buffer[i - 1] * 2;
    
    for(int i = 1;i < 12;i++)
       for(int j = 0;j < (1 << i);j++)
          for(int k = 0;k < (1 << i);k++)
                confilict[j][k][i] = !check(j, k, i);
    
	while(cin >> m >> n, m && n)
	{
        if ((m * n) & 0x01)
        {
            cout << 0 << endl;
            continue;
        }
		int oldIndex = 0, newIndex = 1;

		long long  dp[2][1 << 11];
		for(int i = 0;i < buffer[n];i++)
			dp[0][i] = 0;
		dp[0][0] = 1;

		for(int i = 0;i < m;i++)
		{
			for(int j = 0;j < buffer[n];j++)
			{
				dp[newIndex][j] = 0;
				for(int k = 0;k < buffer[n];k++)
					if (!confilict[j][k][n])
						dp[newIndex][j] += dp[oldIndex][k];
			}
			oldIndex = 1 - oldIndex;
			newIndex = 1 - newIndex;
		}

		cout << dp[oldIndex][0] << endl;
	}

	return 0;
}