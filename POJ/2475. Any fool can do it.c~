#include <stdio.h>
#include <string.h>
#define N 205
#define false 0
#define true 1

char str[N];
int elm[N][N], list[N][N], set[N][N];

int isElm(int begin, int end)
{
	if (begin > end)
		return false;
	if (elm[begin][end])
		return elm[begin][end] - 1;
	if (end != begin)
		elm[begin][end] = isSet(begin, end) + 1;
	else
		if (str[begin] == '{' || str[begin] == '}' || str[begin] == ',')
			elm[begin][end] = true + 1;
		else
			elm[begin][end] = false + 1;
	return elm[begin][end] - 1;
}
int isList(int begin, int end)
{
	int i;
	if (begin > end)
		return false;
	if (list[begin][end])
		return list[begin][end] - 1;
	if (isElm(begin, end))
		list[begin][end] = true + 1;
	else
	{
		//the splitter ',' can't be in the end and begin position of list
		for(i = begin + 1;i < end;i++)
			if (str[i] == ',' && (isElm(begin, i - 1) && isList(i + 1, end)))
			{
					list[begin][end] = true + 1;
					break;
			}
	}
	if (!list[begin][end])
		list[begin][end] = false + 1;
	return list[begin][end] - 1;
}
int isElmList(int begin, int end)
{
	if (begin > end)
		return true;
	else
		return isList(begin, end);

}
int isSet(int begin, int end)
{
	if (begin >= end)
		return false;
	if (set[begin][end])
		return set[begin][end] - 1;
	if (str[begin] == '{' && str[end] == '}' && isElmList(begin + 1, end - 1))
		set[begin][end] = true + 1;
	else
		set[begin][end] = false + 1;
	return set[begin][end] - 1;
}
int main()
{
	int i, len, res, n;
	scanf("%d", &n);
	for(i = 0;i < n;i++)
	{
		scanf("%s", str);
		memset(elm, 0, sizeof(elm));
		memset(list, 0, sizeof(list));
		memset(set, 0, sizeof(set));
		len = strlen(str);
		res = isSet(0, len - 1);

		res ? printf("Word #%d: Set\n", i + 1) : printf("Word #%d: No Set\n", i + 1);
	}
	return 0;
}
