#include <iostream>
#include <cstring>
using namespace std;

int graph[505][505];
int visited[505];
int matchX[505], matchY[505];
int nodeNum;

bool find(int x)
{
	for(int i = 0;i < nodeNum;i++)
	{
		if (graph[x][i] && !visited[i])
		{
			visited[i] = 1;
			if (matchY[i] == -1 || find(matchY[i]))
			{
				matchY[i] = x;
				matchX[x] = i;
				return true;
			}
		}
	}
	return false;
}

int maxMatch()
{
	int res = 0;
	for(int i = 0;i < nodeNum;i++)
		matchX[i] = matchY[i] = -1;

	for(int i = 0;i < nodeNum;i++)
	{
		memset(visited, 0, sizeof(visited));
		if (find(i))
			res++;
	}
	return res;
}

void floyd()
{
	for(int k = 0;k < nodeNum;k++)
		for(int i = 0;i < nodeNum;i++)
		{
			if (k == i)
				continue;
			for(int j = 0;j < nodeNum;j++)
			{
				if (j == k || j == i)
					continue;

				if (graph[i][k] && graph[k][j])
					graph[i][j] = 1;
			}
		}
}

int main()
{
	int n, m;

	while(cin >> n >> m, n || m)
	{
		memset(graph, 0, sizeof(graph));
		for(int i = 0;i < m;i++)
		{
			int a, b;
			cin >> a >> b;
			graph[a - 1][b - 1] = 1;
		}

		
        nodeNum = n;
		floyd();
		cout << n - maxMatch() << endl;
	}

	return 0;
}