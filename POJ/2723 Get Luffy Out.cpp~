#include <iostream>
#include <cstring>
#include <cstdio>
#include <stack>
#include <vector>
using namespace std;

vector<int> graph[4096];
int nodeNum;
int checked;

int visited[4096];
int dfn[4096], low[4096];
int comp[4096];
int inStack[4096];
stack<int> tarjanSt;
int compTag;
int dfsTime;


void dfs(int p)
{
    visited[p] = 1;
    dfn[p] = low[p] = dfsTime++;
    tarjanSt.push(p);
    inStack[p] = 1;

    for(int i = 0;i < graph[p].size();i++)
    {
        int c = graph[p][i];
        if (!visited[c])
        {
            dfs(c);
            low[p] = min(low[c], low[p]);
        }
        else if (inStack[c])
            low[p] = min(low[p], dfn[c]);
    }

    if (dfn[p] == low[p])
    {
        int v = tarjanSt.top();
        tarjanSt.pop();
        inStack[v] = 0;
        while(v != p)
        {
            comp[v] = compTag;
            v = tarjanSt.top();
            tarjanSt.pop();
            inStack[v] = 0;
        }
        comp[p] = compTag;
        compTag++;
    }
}

void tarjan()
{
    compTag = 1;
    dfsTime = 1;
    memset(visited, 0, sizeof(visited));
    memset(inStack, 0, sizeof(inStack));
    for(int i = 0;i < nodeNum;i++)
        if (!visited[i])
            dfs(i);

    for(int i = 0;i < nodeNum - 2;i += 2)
    {
        if (comp[i] == comp[i + 1])
        {
            checked = false;
            break;
        }
    }
}

int edge[2048][2];
vector<int> temp[4096];
int main()
{
    int n, m;
    while(scanf("%d %d", &n, &m), n || m)
    {
        nodeNum = n * 4;
        for(int i = 0;i < nodeNum;i++)
            temp[i].clear();
        for(int i = 0;i < n;i++)
        {
            int a, b;
            scanf("%d %d", &a, &b);
            temp[b * 2 + 1].push_back(a * 2);
            temp[a * 2 + 1].push_back(b * 2);
        }
        
        for(int i = 0;i < m;i++)
            scanf("%d %d", &edge[i][0], &edge[i][1]); 
       
        int h = m - 1, l = 0;
        int res = -1;
        while(h >= l)
        {
            int mid = (h + l) / 2;
            for(int i = 0;i < nodeNum;i++)
                graph[i] = temp[i];
            
            for(int i = 0;i <= mid;i++)
            {
                graph[edge[i][0] * 2].push_back(edge[i][1] * 2 + 1);
                graph[edge[i][1] * 2].push_back(edge[i][0] * 2 + 1);
            }
            
            checked = true;
            tarjan();
            if (checked)
            {
                res = max(mid, res);
                l = mid + 1;
            }
            else
                h = mid - 1;
        }
        
        cout << res + 1 << endl;
    }
    return 0;
}