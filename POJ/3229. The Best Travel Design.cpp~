#include <iostream>
#include <cstdio>
using namespace std;

int spTime[20];
double dp[1 << 15][20];
int graph[20][20][2];
double transferTime[20][20];
int n, m, k;
int mustVisit;

void dfs(int status, int sight, double value)
{
	if (dp[status][sight] != -1 && dp[status][sight] < value)
		return;

	dp[status][sight] = value;
	for(int i = 2;i <= n;i++)
	{
		if (transferTime[sight][i] > 0 && ((status & (1 << (i - 1))) == 0))
			if (transferTime[sight][i] + value + spTime[i] <= k)
				dfs((status | (1 << (i - 1))), i, transferTime[sight][i] + value + spTime[i]);
	}
}

void floyd()
{
    for(int i = 1;i <= n;i++)
        for(int j = 1;j <= n;j++)
             if (graph[i][j][0] != -1)
             {
                 if (graph[i][j][1] == 0)
                    transferTime[i][j] = graph[i][j][0] * 1.0 / 80;
                 else
                     transferTime[i][j] = graph[i][j][0] * 1.0 / 120;
             }
             else
                transferTime[i][j] = -1;
    
    for(int k = 1;k <= n;k++)
        for(int i = 1;i <= n;i++)
        {
            if (k == i)
                continue;
            for(int j = 1;j <= n;j++)
            {
                if (j == k || j == i)
                    continue;
                if (transferTime[i][k] > 0 && transferTime[k][j] > 0 && (transferTime[i][j] < 0 || transferTime[i][j] > transferTime[i][k] + transferTime[k][j]))
                    transferTime[i][j] = transferTime[i][k] + transferTime[k][j];
            }
        }
}

int main()
{
	while(cin >> n >> m >> k, m || n || k)
	{
		k *= 12;
		mustVisit = 0;
		for(int i = 0;i < m;i++)
		{
			int a;
			cin >> a;
			mustVisit |= 1 << (a - 1);
		}
		
		for(int i = 1;i <= n;i++)
            scanf("%d", &spTime[i]);

		for(int i = 0;i < 1 << n;i++)
			for(int j = 0;j <= n;j++)
				dp[i][j] = -1;

		for(int i = 0;i < 20;i++)
			for(int j = 0;j < 20;j++)
				graph[i][j][0] = graph[j][i][1] = -1;

		int x, y, len, kind;
		while(scanf("%d %d %d %d", &x, &y, &len, &kind), x || y || len || kind)
		{
			graph[x][y][0] = graph[y][x][0] = len;
			graph[x][y][1] = graph[y][x][1] = kind;
		}
		floyd();
		dfs(1, 1, spTime[1]);

		int res = -1;
		for(int i = 0;i < (1 << n);i++)
		{
			if((i & mustVisit) != mustVisit)
				continue;	

			int oneNum = 0;
			int temp = i;
			while(temp)
			{
				temp = temp & (temp - 1);
				oneNum++;
			}

			for(int j = 2;j <= n;j++)
			{
				if (dp[i][j] == -1)
					continue;

				if (transferTime[j][1] > 0 && transferTime[j][1] + dp[i][j] < k)
                    res = res < oneNum ? oneNum : res;
			}
		}

		if (res >= m)
			cout << res << endl;
		else
			cout << "No Solution" << endl;
	}
	return 0;
}
