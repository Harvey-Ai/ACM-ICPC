#include <iostream>
#include <cstdio>
using namespace std;

int graph[15][15];
int dp[1 << 11][11];
int n;

void floyd()
{
	for(int k = 0;k <= n;k++)
		for(int i = 0;i <= n;i++)
		{
			if (i == k)
				continue;
			for(int j = 0;j <= n;j++)
			{
				if (i == j || j == k)
					continue;

				if (graph[i][j] > graph[i][k] + graph[k][j])
					graph[i][j] = graph[i][k] + graph[k][j];
			}
		}
}

void dfs(int status, int cur, int val)
{
	if (dp[status][cur] != -1 && dp[status][cur] < val)
		return;

	dp[status][cur] = val;
	for(int i = 1;i <= n;i++)
	{
		if (status & (1 << i))
			continue;

		dfs(status | (1 << i), i, val + graph[cur][i]);
	}
}


int main()
{
	while(cin >> n, n)
	{
		for(int i = 0;i < n + 1;i++)
			for(int j = 0;j < n + 1;j++)
				scanf("%d", &graph[i][j]);

		floyd();
		for(int i = 0;i < (1 << (n + 1));i++)
			for(int j = 0;j < n + 1;j++)
				dp[i][j] = -1;
		dfs(1, 0, 0);

		int res = 1000000;
		for(int i = 0;i < n + 1;i++)
			if (res > dp[(1 << (n + 1)) - 1][i] + graph[i][0] && dp[(1 << (n + 1)) - 1][i] != -1)
				res = dp[(1 << (n + 1)) - 1][i] + graph[i][0];
		cout << res << endl;
	}
	return 0;
}
