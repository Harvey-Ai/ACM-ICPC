#include <iostream>
#include <string>
#include <vector>
#include <utility>
using namespace std;

#define MAX 0x7fffffff
#define NMAX 1005
int dis[NMAX];
int used[NMAX];
vector < pair <int, int> > graph[NMAX], gg[NMAX];
int dp[NMAX][2];
int v, ss;

void dijkstra(int n)
{
	int i, j, u, ldis;
	int p;
	for (i = 0; i < n; i++)
	{
		dis[i] = MAX;
		used[i] = 0;
		dp[i][0] = dp[i][1] = 0;
	}

	dp[v][0] = 1;
	dp[v][1] = 0;
	dis[v] = 0;
	ldis = 0;
	u = v;

	for (i = 0; i < n; i++)
	{
		for (j = 0; j < gg[u].size(); j++)
		{
			p = gg[u][j].first;
			if (used[p] && dis[p] + gg[u][j].second == ldis)
			{
				dp[u][0] += dp[p][0];
			//	dp[u][1] += dp[p][1];
			}
		}

		used[u] = 1;
		for (j = 0; j < graph[u].size(); j++)
		{
			p = graph[u][j].first;
			if (!used[p] && dis[u] + graph[u][j].second < dis[p])
			{
				dis[p] = dis[u] + graph[u][j].second;
			}
		}
		
		ldis = MAX;
		for (j = 0; j < n; j++)
			if (dis[j] < ldis && used[j] == 0)//&&dis[j]>0)
			{
				ldis = dis[j];
				u = j;
			}
	}
}

int work(int n)
{
	int u = v;
	int i, j;
	int ldis = 0;
	int p;
	memset(used, 0, sizeof(used));
	used[u] = 1;
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < gg[u].size(); j++)
		{
			p = gg[u][j].first;
			if (dis[p] + gg[u][j].second == ldis)
				dp[u][1] += dp[p][1];
			else if (dis[p] + gg[u][j].second == ldis + 1)
				dp[u][1] += dp[p][0];
		}
	

		ldis = MAX;
		for (j = 0; j < n; j++)
			if (dis[j] < ldis && !used[j])//&&dis[j]>0)
			{
				ldis = dis[j];
				u = j;
			}
		used[u] = 1;
	}
	return 0;
}

int main()
{
	int ncase;
	int n, m;
	int a, b, c;
	int i, j;
	scanf("%d", &ncase);
	for(i = 0;i < NMAX;i++)
	{
		graph[i].clear();
		gg[i].clear();
	}
	while(ncase--)
	{
		scanf("%d %d", &n, &m);
		while(m--)
		{
			scanf("%d %d %d", &a, &b, &c);
			graph[a - 1].push_back(make_pair(b - 1, c));
			gg[b - 1].push_back(make_pair(a - 1, c));
		}
		scanf("%d %d", &v, &ss);
		v--;ss--;
		dijkstra(n);
		work(n);
		printf("%d\n", dp[ss][0] + dp[ss][1]);
		while(n--)
		{
			graph[n].clear();
			gg[n].clear();
		}
	}
	return 0;
}

