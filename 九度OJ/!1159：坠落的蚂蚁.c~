#include <iosteam>
using namespace std;

int A;
int n;
struct Ant
{
	int pos, direct;
}ant[105];


bool cmp(const struct Ant a, const struct Ant b)
{
	if (a.pos < b.pos)
		return 1;
	else
		 return 0;
}

void work()
{
	int second = 0;
	int start = 0;
	int end = n - 1;
	int i;

	while(ant[A].pos != 0 && ant[A].pos != 100)
	{
		for(i = start;i <= end;i++)
		{
			if (ant[i].pos <= 0)
				start = i + 1;
			if (ant[i].end >= 100)
				end = i - 1;
		}
		if (end - start == 1)
			return -1;
		if (ant[A].pos <= 0 || ant[A].pos >= 100)
			return second;
			
		second++;
		for(i = start;i <= end;i++)
		{
			if (i + 2 <= end)
				if (ant[i].pos == ant[i + 1].pos - 1 && ant[i + 1].pos == ant[i + 2].pos - 1
					ant[i].direct == -ant[i + 2].direct && ant[i + 1].direct == 0)
				{
					ant[i].direct = -ant[i].direct;
					ant[i + 2].dircet = -ant[i + 2].direct;
				}
			if (i + 1 <= end)
			{
				if (ant[i].pos == ant[i + 1].pos - 1 && ant[i].direct == -ant[i + 1].direct)
				{
					ant[i].direct = -ant[i].direct;
					ant[i + 1].dircet = -ant[i + 1].direct;
				}
				else if (ant[i].pos == ant[i + 1].pos - 1 && (ant[i].direct == 0 || ant[i + 1].direct == 0))
				{
					int temp = ant[i].direct;
					ant[i].direct = ant[i + 1].direct;
					ant[i + 1].dircet = temp;
				}
			}
		}
		for(i = start;i <= end;i++)
			ant[i].pos += ant[i].direct;
	}
	return second;
}

int main()
{
	int i;
	cin >> n;
	for(i = 0;i < n;i++)
	{
		cin >> ant[i].pos >> ant[i].direct;
		if (ant[i].direct == 0)
			A = i;
	}
	sort(&ant[0], &ant[n], cmp);
	int res = work();
	if (res != -1)
		cout << res << endl;
	else
		cout << "Cannot fall!" << endl;
	return 0;
}
