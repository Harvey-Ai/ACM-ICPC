#include <iostream>
#include <algorithm>
using namespace std;

struct block
{
	int l, w, h;
};

struct block bb[100005];
int n;

bool cmp1(struct block a, struct block b )
{
	if (a.l > b.l)
		return 1;
	if (a.l < b.l)
		return 0;
	if (a.w > b.w)
		return 1;
	if (a.w < b.w)
		return 0;
	if (a.h > b.h)
		return 1;
	if (a.h < b.h)
		return 0;
	return 0;
}

bool cmp2(struct block a, struct block b )
{
	if (a.l > b.l)
		return 1;
	if (a.l < b.l)
		return 0;
	if (a.h > b.h)
		return 1;
	if (a.h < b.h)
		return 0;
	if (a.w > b.w)
		return 1;
	if (a.w < b.w)
		return 0;
	return 0;
}

bool cmp3(struct block a, struct block b )
{
	if (a.w > b.w)
		return 1;
	if (a.w < b.w)
		return 0;
	if (a.l > b.l)
		return 1;
	if (a.l < b.l)
		return 0;
	if (a.h > b.h)
		return 1;
	if (a.h < b.h)
		return 0;
	return 0;
}

bool cmp4(struct block a, struct block b )
{
	if (a.w > b.w)
		return 1;
	if (a.w < b.w)
		return 0;
	if (a.h > b.h)
		return 1;
	if (a.h < b.h)
		return 0;
	if (a.l > b.l)
		return 1;
	if (a.l < b.l)
		return 0;
	return 0;
}

bool cmp5(struct block a, struct block b )
{
	if (a.h > b.h)
		return 1;
	if (a.h < b.h)
		return 0;
	if (a.l > b.l)
		return 1;
	if (a.l < b.l)
		return 0;
	if (a.w > b.w)
		return 1;
	if (a.w < b.w)
		return 0;
	return 0;
}

bool cmp6(struct block a, struct block b )
{
	if (a.h > b.h)
		return 1;
	if (a.h < b.h)
		return 0;
	if (a.w > b.w)
		return 1;
	if (a.w < b.w)
		return 0;
	if (a.l > b.l)
		return 1;
	if (a.l < b.l)
		return 0;
	return 0;
}


int work()
{
	int l, w, h;
	l = bb[n - 1].l;
	w = bb[n - 1].w;
	h = bb[n - 1].h;

	int res = 1;
	for(int i = n - 2;i >= 0;i--)
		if (l <= bb[i].l && w <= bb[i].w && h <= bb[i].h)
		{
			l = bb[i].l;
			w = bb[i].w;
			h = bb[i].h;
			res ++;
		}
	return res;
}

int main()
{
	int i;
	int res;
	while(cin >> n)
	{
		for(i = 0;i < n;i++)
			cin >> bb[i].l >> bb[i].w >> bb[i].h;

		sort(&bb[0], &bb[n], cmp1);
		res = work();

		sort(&bb[0], &bb[n], cmp2);
		int temp = work();
		if (temp > res)
			res = temp;

		sort(&bb[0], &bb[n], cmp3);
		temp = work();
		if (temp > res)
			res = temp;

		sort(&bb[0], &bb[n], cmp4);
		temp = work();
		if (temp > res)
			res = temp;

		sort(&bb[0], &bb[n], cmp5);
		temp = work();
		if (temp > res)
			res = temp;

		sort(&bb[0], &bb[n], cmp6);
		temp = work();
		if (temp > res)
			res = temp;
		cout << res << endl;

	}
	return 0;
}
