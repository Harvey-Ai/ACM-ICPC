/*
僵尸最近老在百度大厦附近出没,因此公司派出了度度熊去消灭他。度度熊有 n 件武器,第 i 件武器有物理攻击力 Ai 和魔法攻击力 Bi。在某个时刻 t,武器能造成的伤害为Ai+ Bi *t。僵尸有一个初始血量值 H,受到武器的攻击后,血量会减去武器的当前伤害值。如果某个时刻僵尸的血量值为负,则僵尸将原地满血复活为血量值 H。因此为 了消灭僵尸,度度熊的最后一击,必须恰好使僵尸的血量为 0。从时刻 1 开始的每个整数时刻,度度熊可以从自己的武器中挑选一个武器攻击僵尸一次,也可以不攻击僵尸。一件武器可以在不同的时刻使用多次。由于度度熊武器的限制,不是每个血量的僵尸都能杀死。度度熊希望能知道能杀死的僵尸中第 k 小的血量值是多少。
输入描述
输入的第一行包含两个整数 n,k,分别表示度度熊拥有的武器数和要求的血量是第几小的。接下来 n 行表示度度熊拥有的武器,其中第 i 行包含两个整数 Ai,Bi,表示第 i 个武器的物理和魔法攻击力。
输出描述
输出包含一个整数,表示度度熊能杀死的僵尸中第 k 小的血量值。
样例输入
2 8
1 3
3 5
样例输出
15
提示
度度熊能杀死的僵尸中前 8 小的血量值依次为 4,7, 8, 10, 11, 13, 14, 15。
对于 100%的数据,1 ≤ n ≤ 10,1 ≤ k ≤ 50,000,0 ≤ Ai, Bi ≤ 10,000。
*/


#include <iostream>
#include <queue>
#include <set>
#include <vector>
#include <cstdio>
using namespace std;
 
int A[20], B[20];
int buf[20];
 
const int mod = 1000007;
int hash[mod + 1];
int pre[50005];
 
int findHash(int v) {
    int pos = v % mod;
 
    while(hash[pos] != v && hash[pos] != -1) {
        pos++;
    }
    return hash[pos] == v;
}
 
void insertHash(int v) {
    int pos = v % mod;
 
    while(hash[pos] != -1) {
        pos++;
    }
    hash[pos] = v;
}
 
int main() {
 
    int n, k;
    scanf("%d %d", &n, &k);
    for(int i = 0;i < n;i++) {
        scanf("%d %d", &A[i], &B[i]);
    }
    for(int i = 0;i <= mod;i++) {
        hash[i] = -1;  
    }
    for(int i = 0;i < n;i++) {
        buf[i] = A[i]; 
    }
 
    set<int> tempSet;
    tempSet.insert(0);
    insertHash(0);
    bool hasNew = true;
    int preNum = 0;
    for(int i = 0;i < k;i++) {
        for(int j = 0;j < n;j++) {
            buf[j] = buf[j] + B[j];
        }
 
        if (hasNew) {
            pre[k] = 10000000;
            preNum = 0;
            for(set<int>::iterator it = tempSet.begin();it != tempSet.end() && preNum < k + 1;it++) {
                pre[preNum++] = *it;
            }
            hasNew = false;
        }
 
        int flag = 0;
         
        for(int j = 0;j < n;j++) {
            for(int l = 0;l < preNum;l++) {
                int temp = pre[l] + buf[j];
                if (temp < pre[k]) {
                    flag = true;
                    if (!findHash(temp)) {
                        insertHash(temp);
                        tempSet.insert(temp);
                        hasNew = true;
                    }
                } else {
                    break;
                }
            }
        }
        if (flag == 0) {
            break;
        }
    }
 
    cout << pre[k] << endl;
    return 0;
}
