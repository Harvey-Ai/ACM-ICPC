/*
描述
八进制小数可以用十进制小数精确的表示。比如，八进制里面的0.75等于十进制里面的0.963125 (7/8 + 5/64)。所有小数点后位数为n的八进制小数都可以表示成小数点后位数不多于3n的十进制小数。

你的任务是写一个程序，把(0, 1)中的八进制小数转化成十进制小数。
输入
输入包括若干八进制小数，每个小数占用一行。每个小数的形式是0.d1d2d3 ... dk，这里di是八进制数0...7，而且已知0 < k < 15。
输出
对于每个输入的八进制小数，输入如下形式的一行

0.d1d2d3 ... dk [8] = 0.D1D2D3 ... Dm [10]


这里左边是输入的八进制小数，右边是相等的十进制小数。输出的小数末尾不能有0，也就是说Dm不等于0。
样例输入
0.75
0.0001
0.01234567
样例输出
0.75 [8] = 0.953125 [10]
0.0001 [8] = 0.000244140625 [10]
0.01234567 [8] = 0.020408093929290771484375 [10]
*/

#include <iostream> 
using namespace std;

int main () 
{
 char octal[100]; 
 double dec,n;
 int i;
 
 while(cin >> octal) 
 { 
  for(i=0,n=0,dec=0;octal[i]!=0;i++)
  {
   if(i==0&&octal[i]=='0')
   {
    continue;
   }
   else if(i==1&&octal[i]=='.')
   {
    n=1.0/8;
    continue;
   }
   else if(octal[i]<='7' && octal[i]>='0')
   {
    dec+=(octal[i]-'0')*n;
    n*=1.0/8;
   }
   else
   {
    break;
   }
  }
  
  cout<<octal<<"[8]="<<dec<<"[10]"<<endl;
 }
 return 0;
}
