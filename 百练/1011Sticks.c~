#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;

int arr[65];
int used[65];
int stickNum;
int n;

int check(int stick, int remind, int pos, int complish)
{
	if (complish == stickNum)
		return 1;
	int i;
	if (remind == 0)
	{
		complish++;
		if (complish == stickNum)
			return 1;
		remind = stick;
		for(i = 0;i < n;i++)
			if (!used[i])
				break;
		used[i] = 1;
		int res = check(stick, remind - arr[i], i + 1, complish);
		used[i] = 0;
		return res;
	}

	int pre = 0;
	for(i = pos;i < n;i++)
	{
		if (!used[i] && arr[i] != pre)
		{
			if ((arr[i - 1] != arr[i] || used[i - 1]) && remind - arr[i] >= 0)
			{
				used[i] = 1;
				if (check(stick, remind - arr[i], i + 1, complish))
					return 1;
				used[i] = 0;
				if (arr[i] == remind)
					return 0;
				pre = arr[i];
			}
		}
	}

	return 0;
}

bool cmp(int a, int b)
{
	return a < b ? 0 : 1;
}

int main()
{
	int i;
	int sum;
	int best;
	while(cin >> n, n)
	{
		for(i = 0;i < n;i++)
			cin >> arr[i];

		sum = 0;
		for(i = 0;i < n;i++)
			sum += arr[i];
		sort(&arr[0], &arr[n], cmp);
		best = sum;

		for(i = arr[0]; i * 2 <= sum;i++)
			if (sum % i == 0)
			{
				memset(used, 0, sizeof(used));
				stickNum = sum / i;
				if (check(i, i, 0, 0) == 1)
				{
					best = i;
					break;
				}
			}
		cout << best << endl;
	}
}


