#include <iostream>
using namespace std;

int lig[100][100];
int g[100][100];
int temp[100][100];
int result;

/*
int check()
{
	int i, j;
	int temp[100][100];

	for(i = 0;i < 5;i++)
		for(j = 0;j < 6;j++)
			temp[i][j] = g[i][j];

	for(i = 0;i < 5;i++)
		for(j = 0;j < 6;j++)
			if (lig[i][j] == 1)
			{
				if (i - 1 >= 0) temp[i-1][j] = 1 - temp[i-1][j];
				if (j - 1 >= 0) temp[i][j-1] = 1 - temp[i][j-1];
				if (i + 1 < 5) temp[i+1][j] = 1 - temp[i+1][j];
				if (j + 1 < 6) temp[i][j+1] = 1 - temp[i][j+1];
				temp[i][j] = 1 - temp[i][j];
			}

	for(i = 0;i < 5;i++)
		for(j = 0;j < 6;j++)
			if (temp[i][j] == 1)
				return 0;
	return 1;
}
*/
int cal(int row, int column)
{
	int i = row, j = column;
	if (i - 1 >= 0) temp[i-1][j] = 1 - temp[i-1][j];
	if (j - 1 >= 0) temp[i][j-1] = 1 - temp[i][j-1];
	if (i + 1 < 5) temp[i+1][j] = 1 - temp[i+1][j];
	if (j + 1 < 6) temp[i][j+1] = 1 - temp[i][j+1];
	temp[i][j] = 1 - temp[i][j];
}

int check(int a, int b)
{
	int i, j;
	for(i = a; i <= b;i++)
		for(j = 0;j < 6;j++)
			if (temp[i][j] == 1)
				return 0;
	return 1;
}

void dfs(int row, int column)
{
	int i, j;
	if (row == 5 && column == 0 && result == 0)
	{
		result = check(3, 4);
		if (result == 1)
		{
			for(i = 0;i < 5;i++)
			{
				for(j = 0;j < 6;j++)
					cout<<lig[i][j]<<" ";
				cout<<endl;
			}
		}
	}
	if (column == 0 && row > 1)
		if (!check (row - 2, row - 2))
			return;

	if (result == 1 || row >= 5)
		return;
	//cout << row << " " << column << endl;
	lig[row][column] = 0;
	if (column + 1 == 6)
		dfs(row + 1, 0);
	else
		dfs(row, column + 1);

	lig[row][column] = 1;
	cal(row, column);
	if (column + 1 == 6)
		dfs(row + 1, 0);
	else
		dfs(row, column + 1);
	cal(row, column);
}

int main()
{
	int n;
	int i, j;
	int icase;

	cin >> n;

	for(icase = 1;icase <= n;icase++)
	{
		for(i = 0;i < 5;i++)
			for(j = 0;j < 6;j++)
			{
				cin >> g[i][j];
				temp[i][j] = g[i][j];
			}

		result = 0;
		cout << "PUZZLE #" << icase << endl; 
		dfs(0, 0);
	//	cout << "fdasfd" << endl;
	}

	return 0;
}
