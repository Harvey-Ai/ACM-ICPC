#include <iostream>
#include <cstring>
#include <cstdio>
#include <queue>
using namespace std;

int dir[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

int h, w;
char str[4005][4005];
bool visit[4005][4005];

struct qEle {
	int x, y;

	qEle(int x, int y) {
		this->x = x;
		this->y = y;	
	}
};

bool check(int x, int y) {
	return x >= 0 && x < h && y >= 0 && y < w;
}

int main() {
	int T;
	scanf("%d", &T);

	while(T--) {
		scanf("%d %d", &h, &w);
		for(int i = 0;i < h;i++) {
			scanf("%s", str[i]);
		}

		if (str[0][0] == '.') {
			cout << 0 << endl;
			continue;		
		}

		char mark = str[0][0];
		memset(visit, 0, sizeof(visit));

		vector<pair<int, int> > temp;
		queue<qEle> q;
		q.push(qEle(0, 0));
		visit[0][0] = 1;
		temp.push_back(make_pair(0, 0));
		while(!q.empty()) {
			qEle ele = q.front();
			q.pop();

			for(int i = 0;i < 4;i++) {
				int px = ele.x + dir[i][0], py = ele.y + dir[i][1];
				if (check(px, py) && !visit[px][py] && str[px][py] == mark) {
					q.push(qEle(px, py));
					visit[px][py] = 1;
					temp.push_back(make_pair(px, py));
				}			
			}
		}
		for(int i = 0;i < temp.size();i++) {
			q.push(qEle(temp[i].first, temp[i].second));		
		}
	
		// cout << q.size() << endl;
		int res = 0;
		while(!q.empty()) {
			vector<pair<int, int> > temp;
			mark = 'B' - mark + 'A';

			while(!q.empty()) {
				qEle ele = q.front();
				q.pop();
			
				for(int i = 0;i < 4;i++) {
					int px = ele.x + dir[i][0], py = ele.y + dir[i][1];
					if (check(px, py) && !visit[px][py] && str[px][py] == mark) {
						visit[px][py] = 1;
						q.push(qEle(px, py));
						temp.push_back(make_pair(px, py));
					}
				}
			}

			for(int i = 0;i < temp.size();i++) {
				q.push(qEle(temp[i].first, temp[i].second));
			}
			res++;
		}

		printf("%d\n", res);

	}

	return 0;
}
